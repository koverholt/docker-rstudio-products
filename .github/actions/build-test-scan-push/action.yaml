name: 'Build/Test/Scan/Push Image'
inputs:
  context:
    description: Path to the directory of the Dockerfile
    required: true
    type: string
  os:
    description: Target OS to build, the same as the extension of the Dockerfile
    default: ubuntu2204
    type: string
  product:
    description: Product being built
    type: string
  build-args:
    description: JSON list of build args for the built image
    required: true
    type: string
  image-tags:
    description: List of tags for the built image
    required: true
    type: string
  test-image:
    description: Flag to test image once built
    default: true
    type: boolean
  scan-image:
    description: Flag to scan image using Snyk
    default: true
    type: boolean
  snyk-token:
    description: Username for authentication with Snyk for scanning images
    type: string
  snyk-org-id:
    description: Snyk Organization ID to publish scans to
    type: string
  push-image:
    description: Flag to push image once built
    default: true
    type: boolean
  use-ghcr:
    description: Flag to authenticate with GHCR.io
    default: true
    type: boolean
  ghcr-token:
    description: Username for authentication with GHCR.io
    type: string
  use-dockerhub:
    description: Flag to authenticate with Dockerhub
    default: true
    type: boolean
  dockerhub-username:
    description: Username for authentication with DockerHub
    type: string
  dockerhub-token:
    description: Username for authentication with DockerHub
    type: string

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to ghcr.io
      if: ${{ inputs.use-ghcr }}
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.ghcr-token }}

    - name: Login to Docker Hub
      if: ${{ inputs.use-dockerhub }}
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-token }}

    - name: echo args
      shell: bash
      run: echo ${{ inputs.build-args }}

    - name: Build
      id: image-build
      uses: docker/build-push-action@v4
      with:
        load: true
        context: ${{ inputs.context }}
        file: ${{ inputs.context }}/Dockerfile.${{ inputs.os }}
        cache-from: type=gha
        cache-to: type=gha
        build-args: |
          ${{ inputs.build-args }}
        tags: ${{ inputs.image-tags }}

    - name: Get first tag
      shell: bash
      id: first-tag
      run: |
        FIRST_TAG=$(cut -d "," -f 1 <<< $IMAGE_TAGS)
        echo "FIRST_TAG=$FIRST_TAG" >> $GITHUB_OUTPUT

    - name: Test
      shell: bash
      if: ${{ inputs.test-image }}
      run: |
        BUILD_ARGS_CLEAN=$(tr '\n' ' ' <<< ${{ inputs.build-args }})
        ${BUILD_ARGS_CLEAN} IMAGE_NAME=${{ steps.first-tag.outputs.FIRST_TAG }} docker-compose -f ${{ inputs.context }}/docker-compose.test.yml run sut

    - name: Run Snyk to check Docker image for vulnerabilities (main)
      if: ${{ github.ref == 'refs/heads/main' }} && ${{ inputs.scan-image }}
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ inputs.snyk-token }}
      with:
        image: ${{ steps.first-tag.FIRST_TAG }}
        args: |
          --file=${{ inputs.context }}/Dockerfile.${{ inputs.os }} \
          --org=${{ inputs.snyk-org-id }} \
          --project-name=${{ steps.first-tag.FIRST_TAG }} \
          --tags=product=${{ inputs.product }},os=${{ inputs.os }} \
          --exclude-base-image-vulns \
          --app-vulns
        command: monitor

    - name: Run Snyk to check Docker image for vulnerabilities (branch)
      if: ${{ github.ref != 'refs/heads/main' }} && ${{ inputs.scan-image }}
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ inputs.snyk-token }}
      with:
        image: ${{ steps.first-tag.FIRST_TAG }}
        args: |
          --file=${{ inputs.context }}/Dockerfile.${{ inputs.os }} \
          --org=${{ inputs.snyk-org-id }} \
          --project-name=${{ steps.get-default-tag.outputs.DEFAULT_TAG }} \
          --tags=product=${{ inputs.product }},os=${{ inputs.os }} \
          --exclude-base-image-vulns \
          --app-vulns
        command: test

    - name: Build
      uses: docker/build-push-action@v4
      if: ${{ inputs.push-image }}
      with:
        push: true
        context: ${{ inputs.context }}
        file: ${{ inputs.context }}/Dockerfile.${{ inputs.os }}
        cache-from: type=gha
        cache-to: type=gha
        build-args: ${{ inputs.build-args }}
        tags: ${{ inputs.image-tags }}
