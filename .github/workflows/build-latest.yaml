on:
  push:
    branches:
      - main
      - dev
  pull_request:

name: build/test/push (latest)
jobs:
  build-base:
    runs-on: ubuntu-latest
    name: build-${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu1804', 'ubuntu2204', 'centos7']
        lang:
          - {r-primary: "4.2.0", r-alternate: "3.6.2", py-primary: "3.9.5", py-alternate: "3.8.10"}
          - {r-primary: "4.2.3", r-alternate: "4.1.3", py-primary: "3.9.14", py-alternate: "3.8.15"}

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          just-version: '1.11.0'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build base image
        id: build-base-image
        run: |
          TAGS=`just -f ci.Justfile BUILDX_PATH=${{ steps.buildx.outputs.name }} R_VERSION=${{ matrix.lang.r-primary }} R_VERSION_ALT=${{ matrix.lang.r-alternate }} PYTHON_VERSION=${{ matrix.lang.py-primary }} PYTHON_VERSION_ALT=${{ matrix.lang.py-alternate }} build-base ${{ matrix.os }} base`
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Show image size
        run: |
          docker image ls

      - name: Test image
        run: |
          just -f ci.Justfile R_VERSION=${{ matrix.lang.r-primary }} R_VERSION_ALT=${{ matrix.lang.r-alternate }} PYTHON_VERSION=${{ matrix.lang.py-primary }} PYTHON_VERSION_ALT=${{ matrix.lang.py-alternate }} test-base ${{ matrix.os }} base

      - name: Run Snyk to check Docker image for vulnerabilities (main)
        if: ${{ github.ref == 'refs/heads/main' }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.build-base-image.outputs.TAGS }}
          args: --file=./product/Dockerfile.${{ matrix.os }}
          command: monitor

      - name: Run Snyk to check Docker image for vulnerabilities (branch)
        if: ${{ github.ref != 'refs/heads/main' }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.build-base-image.outputs.TAGS }}
          args: --file=./product/Dockerfile.${{ matrix.os }}
          command: test

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.BUILD_PAT }}

      - name: Push image(s) to registries
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}
        run: |
          just -f ci.Justfile push-images ${{ steps.build-base-image.outputs.TAGS }}


  build-pro:
    needs: build-base
    runs-on: ubuntu-latest
    name: build-pro-${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu1804', 'ubuntu2204', 'centos7']
        lang:
          - {r-primary: "4.2.0", r-alternate: "3.6.2", py-primary: "3.9.5", py-alternate: "3.8.10"}
          - {r-primary: "4.2.3", r-alternate: "4.1.3", py-primary: "3.9.14", py-alternate: "3.8.15"}

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          just-version: '1.11.0'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.BUILD_PAT }}

      - name: Build pro drivers image
        id: build-pro-image
        run: |
          TAGS=`just -f ci.Justfile BUILDX_PATH=${{ steps.buildx.outputs.name }} R_VERSION=${{ matrix.lang.r-primary }} R_VERSION_ALT=${{ matrix.lang.r-alternate }} PYTHON_VERSION=${{ matrix.lang.py-primary }} PYTHON_VERSION_ALT=${{ matrix.lang.py-alternate }} build-base ${{ matrix.os }} pro`
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Show image size
        run: |
          docker image ls

      - name: Test image
        run: |
          just -f ci.Justfile R_VERSION=${{ matrix.lang.r-primary }} R_VERSION_ALT=${{ matrix.lang.r-alternate }} PYTHON_VERSION=${{ matrix.lang.py-primary }} PYTHON_VERSION_ALT=${{ matrix.lang.py-alternate }} test-base ${{ matrix.os }} pro

      - name: Run Snyk to check Docker image for vulnerabilities (main)
        if: ${{ github.ref == 'refs/heads/main' }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.build-pro-image.outputs.TAGS }}
          args: --file=./product/pro/Dockerfile.${{ matrix.os }}
          command: monitor

      - name: Run Snyk to check Docker image for vulnerabilities (branch)
        if: ${{ github.ref != 'refs/heads/main' }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.build-pro-image.outputs.TAGS }}
          args: --file=./product/pro/Dockerfile.${{ matrix.os }}
          command: test

      - name: Push image(s) to registries
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}
        run: |
          just -f ci.Justfile push-images ${{ steps.build-pro-image.outputs.TAGS }}


  build-products:
    needs: [build-base, build-pro]
    runs-on: ubuntu-latest
    name: build-${{ matrix.config.product }}-${{ matrix.config.os }}-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - {product: 'workbench', os: 'ubuntu2204', r-primary: "4.2.3", r-alternate: "4.1.3", py-primary: "3.9.14", py-alternate: "3.8.15"}
          - {product: 'connect', os: 'ubuntu1804', r-primary: "4.2.0", r-alternate: "3.6.2", py-primary: "3.9.5", py-alternate: "3.8.10"}
          - {product: 'connect', os: 'ubuntu2204', r-primary: "4.2.0", r-alternate: "3.6.2", py-primary: "3.9.5", py-alternate: "3.8.10"}
          - {product: 'connect-content-init', os: 'ubuntu1804', r-primary: "4.2.0", r-alternate: "3.6.2", py-primary: "3.9.5", py-alternate: "3.8.10"}
          - {product: 'connect-content-init', os: 'ubuntu2204', r-primary: "4.2.0", r-alternate: "3.6.2", py-primary: "3.9.5", py-alternate: "3.8.10"}
          - {product: 'package-manager', os: 'ubuntu1804', r-primary: "4.2.0", r-alternate: "3.6.2", py-primary: "3.9.5", py-alternate: "3.8.10"}
          - {product: 'package-manager', os: 'ubuntu2204', r-primary: "4.2.0", r-alternate: "3.6.2", py-primary: "3.9.5", py-alternate: "3.8.10"}
          - {product: 'r-session-complete', os: 'centos7', r-primary: "4.2.3", r-alternate: "4.1.3", py-primary: "3.9.14", py-alternate: "3.8.15"}
          - {product: 'r-session-complete', os: 'ubuntu2204', r-primary: "4.2.3", r-alternate: "4.1.3", py-primary: "3.9.14", py-alternate: "3.8.15"}
          - {product: 'workbench-for-microsoft-azure-ml', os: 'ubuntu2204', r-primary: "4.2.3", r-alternate: "4.1.3", py-primary: "3.9.14", py-alternate: "3.8.15"}

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          just-version: '1.11.0'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.BUILD_PAT }}

      - name: Get Version
        id: get-version
        run: |
          VERSION=`just -f ci.Justfile get-version ${{ matrix.config.product }} --type=release --local`
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Get default tag
        id: get-default-tag
        run: |
          DEFAULT_TAG=`just -f ci.Justfile R_VERSION=${{ matrix.config.r-primary }} R_VERSION_ALT=${{ matrix.config.r-alternate }} PYTHON_VERSION=${{ matrix.config.py-primary }} PYTHON_VERSION_ALT=${{ matrix.config.py-alternate }} _get-default-tag ${{ matrix.config.product }} ${{ matrix.config.os }}`
          echo "DEFAULT_TAG=$DEFAULT_TAG" >> $GITHUB_OUTPUT

      - name: Build Image
        id: build-image
        run: |
          TAGS=`just -f ci.Justfile BUILDX_PATH=${{ steps.buildx.outputs.name }} R_VERSION=${{ matrix.config.r-primary }} R_VERSION_ALT=${{ matrix.config.r-alternate }} PYTHON_VERSION=${{ matrix.config.py-primary }} PYTHON_VERSION_ALT=${{ matrix.config.py-alternate }} build-release ${{ matrix.config.product }} ${{ matrix.config.os }} ${{ steps.get-version.outputs.VERSION }}`
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Show image size
        run: |
          docker image ls

      - name: Test image
        env:
          RSC_LICENSE: ${{ secrets.RSC_LICENSE }}
          RSPM_LICENSE: ${{ secrets.RSPM_LICENSE }}
          RSW_LICENSE: ${{ secrets.RSW_LICENSE }}
        run: |
          just R_VERSION=${{ matrix.lang.r-primary }} R_VERSION=${{ matrix.config.r-primary }} R_VERSION_ALT=${{ matrix.config.r-alternate }} PYTHON_VERSION=${{ matrix.config.py-primary }} PYTHON_VERSION_ALT=${{ matrix.config.py-alternate }} test-image ${{ matrix.config.product }} ${{ steps.get-version.outputs.VERSION }} ${{ steps.build-image.outputs.TAGS }}

      - name: Run Snyk to check Docker image for vulnerabilities (main)
        if: ${{ github.ref == 'refs/heads/main' }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.get-default-tag.outputs.DEFAULT_TAG }}
          args: --file=./${{ matrix.config.product }}/Dockerfile.${{ matrix.config.os }} --org=${{ secrets.SNYK_ORG_ID }} --project-name=${{ steps.get-default-tag.outputs.DEFAULT_TAG }} --tags=product=${{ matrix.config.product }},os=${{ matrix.config.os }} --exclude-base-image-vulns --app-vulns
          command: monitor

      - name: Run Snyk to check Docker image for vulnerabilities (branch)
        if: ${{ github.ref != 'refs/heads/main' }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.get-default-tag.outputs.DEFAULT_TAG }}
          args: --file=./${{ matrix.config.product }}/Dockerfile.${{ matrix.config.os }} --org=${{ secrets.SNYK_ORG_ID }} --project-name=${{ steps.get-default-tag.outputs.DEFAULT_TAG }} --tags=product=${{ matrix.config.product }},os=${{ matrix.config.os }} --exclude-base-image-vulns --app-vulns
          command: test

      - name: Login to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push image(s) to registries
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          just -f ci.Justfile push-images ${{ steps.build-image.outputs.TAGS }}
