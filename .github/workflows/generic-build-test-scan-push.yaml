on:
  workflow_call:
    inputs:
      context:
        description: Path to the directory of the Dockerfile
        required: true
        type: string
      os:
        description: Target OS to build, the same as the extension of the Dockerfile
        default: ubuntu2204
        type: string
      image-tags:
        description: List of tags for the built image
        required: true
        type: string
      test-image:
        description: Flag to test image once built
        default: true
        type: boolean
      scan-image:
        description: Flag to scan image using Snyk
        default: true
        type: boolean
      push-image:
        description: Flag to push image once built
        default: true
        type: boolean
      use-ghcr:
        description: Flag to authenticate with GHCR.io
        default: true
        type: boolean
      use-dockerhub:
        description: Flag to authenticate with Dockerhub
        default: true
        type: boolean
    secrets: inherit


jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ghcr.io
        if: ${{ inputs.use-ghcr }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.BUILD_PAT }}

      - name: Login to Docker Hub
        if: ${{ inputs.use-dockerhub }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build
        id: image-build
        uses: docker/build-push-action@v4
        with:
          load: true
          context: ${{ inputs.context }}
          file: Dockerfile.${{ inputs.os }}
          cache-from: type=gha
          cache-to: type=gha
          build-args: ${{ inputs.build-args }}
          tags: ${{ inputs.image-tags }}

      - name: Get first tag
        id: first-tag
        run: |
          echo "FIRST_TAG=$(cut -d " " -f 1 <<< $IMAGE_TAGS)" >> $GITHUB_OUTPUT

      - name: Test
        env:
          RSC_LICENSE: ${{ secrets.RSC_LICENSE }}
          RSPM_LICENSE: ${{ secrets.RSPM_LICENSE }}
          RSW_LICENSE: ${{ secrets.RSW_LICENSE }}
        if: ${{ inputs.test-image }}
        run: |
          ${{ inputs.build-args }} docker-compose -f ${{ inputs.context }}/docker-compose.test.yml run sut

      - name: Run Snyk to check Docker image for vulnerabilities (main)
        if: ${{ github.ref == 'refs/heads/main' }} && ${{ inputs.scan-image }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.get-default-tag.outputs.DEFAULT_TAG }}
          args: --file=./${{ matrix.config.product }}/Dockerfile.${{ matrix.config.os }} --org=${{ secrets.SNYK_ORG_ID }} --project-name=${{ steps.get-default-tag.outputs.DEFAULT_TAG }} --tags=product=${{ matrix.config.product }},os=${{ matrix.config.os }} --exclude-base-image-vulns --app-vulns
          command: monitor

      - name: Run Snyk to check Docker image for vulnerabilities (branch)
        if: ${{ github.ref != 'refs/heads/main' }} && ${{ inputs.scan-image }}
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.get-default-tag.outputs.DEFAULT_TAG }}
          args: --file=./${{ matrix.config.product }}/Dockerfile.${{ matrix.config.os }} --org=${{ secrets.SNYK_ORG_ID }} --project-name=${{ steps.get-default-tag.outputs.DEFAULT_TAG }} --tags=product=${{ matrix.config.product }},os=${{ matrix.config.os }} --exclude-base-image-vulns --app-vulns
          command: test

      - name: Build
        uses: docker/build-push-action@v4
        if: ${{ inputs.push-image }}
        with:
          push: true
          context: ${{ inputs.context }}
          file: Dockerfile.${{ inputs.os }}
          cache-from: type=gha
          cache-to: type=gha
          build-args: ${{ inputs.build-args }}
          tags: ${{ inputs.image-tags }}
